
def winnow_test(tests, domains):





⟶ ignore symbolic

tests = {group: (predicate, args, kwargs), …}

for x,y,z in zip(X,Y,Z):

	try:
		result = function(…)
    	group = bin(result)
	catch Exception as e:
		group = 'Un-specified error'
		result = e

	assert tests[group]<predicate>(result, args, kwargs), f'Testing case {group}'

	outcomes[group].append((args, result))
	
	
	―――――――――――――――――――――――――――――――――――――――
	
tests = {group: (predicate, args, kwargs), …}

for x,y,z in zip(X,Y,Z):

	try:
		result = function(…)
    	group = bin(result)
	catch Exception as e:
		group = 'Un-specified error'
		result = e
	
	
	if result == group1:
		assert predicate(result), f'{x,y,z} failed group1'
	elif result == group2:
		assert predicate(result, a, b), f'{x,y,z} failed group2'
	⁞
	⁞
	⁞
	elif group == 'Un-specified error':
		warning...
	
	outcomes[group].append((args, result))
	

→ the challenge is each predicate may have a unique number of arguments
