
Software testing is vital to quality software, yet many projects often fail to test their software adequately or rigorously. While the reasons vary, the consequences are faulty and failure-prone software that increases technical debt and frustration from programmer to end-user. There is no lack of software tooling and testing libraries available. However, most tools require a significant amount of code to be written on the part of the developer, additional code that must be continually maintained and evolved with the production code.  Additionally, tools are language specific, poorly supported, focus on one aspect of testing that makes it difficult to incorporate broadly, too black-box, or too expensive.  This project will build a domain-specific language (DSL) that aims to address these challenges. The DSL will significantly reduce the amount of code written making the test code easier to comprehend and maintain, and it will abstract common testing idioms, provide a concise and clear syntax, and be language agnostic. 



