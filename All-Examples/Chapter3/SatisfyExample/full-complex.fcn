
//:import ComplexNumber
:import ComplexNumber -from [Complex, ComplexError]
:import ComplexPredicates -all

Domain A Reals2
Domain B Reals2

Domain lower Integers -lower 0 -upper 100
Domain upper Integers -lower -100 -upper 100
Domain critical CSVDomain './tests/special-case.txt'

Assert Complex:
  | `print('hello1')`
  | (1.0, 1.0) = `Complex(1.0, 1.0)`
  | (1.0, 1.0) finishes-ms? 100
  | (1, 1) = `Complex(1.0, 1.0)` ~~ "This should never fail"
  | (10.0, 10.0) < `Complex(20.0, 20.0)`
  | (nan, 1.0) error? AssertionError
  | (1.0, 1.0) between? `-1.0` `1.0`
  | (inf,inf) raises&says? Exception "Value must be a float"
  | (1.0, 0.0) is-complex? || is-float?
  |! TypeError (inf, inf) is-a? Complex
  |! (nan, nan) is-a? Complex
  |! (nan, inf) between? -1 1
  |! TypeError (nan, inf) between? -1 1
  ;

Test Complex A:
  | :message "Test the unary properties blah blah blah"
  | :labels [a b] :name 'complex_unary'
  | `print('hello world')`
  | !(is-None?)
  |! valid-complex?
  |! ZeroDivisionError valid-complex?
  |! TypeError between? -10 10
  |! between? 1 2
  | valid-complex?
  | complex-num?
  | additive-id?
  | multiplicative-id?
  | additive-id?
  | complex-self?
  | complex-test-error? 1 2
  ;

Domain C1 ComplexDomain
Domain C2 ComplexDomain

Test _ C1 C2:
  | :message "Test the properties of Complex numbers" :no-suffix :test-name 'complex_binary'
  | closure+?
  | closure*?
  | commutative+?
  | commutative*?
  | multiplicative-inverse?
  |! closure+?
  |! TypeError closure+?
  ;

Test _ C1 C2:
  | :message "Test the mathematical properties" :suffix
  | complex+?
  | complex-?
  | complex*?
  |! NotImplementedError complexÃ·?
  | complex+=?
  | complex-=?
  | complex*=?
  ;

Domain CT ComplexTest

Satisfy Complex CT:
  | :labels [r, i] :min 1 :max 5
  | valid-complex?
  | complex-number?
  | valid-complex?
  | additive-id?
  | multiplicative-id?
  | raises&says? ComplexError "cannot be"
  ;
