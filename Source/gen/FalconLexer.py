# Generated from /media/aaron/Shared2/School/BGSU-thesis/Source/lang/Falcon.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,40,353,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,
        1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,3,15,150,8,15,1,16,1,16,
        1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,3,20,164,8,20,
        1,21,1,21,1,21,1,21,1,21,1,21,3,21,172,8,21,1,22,1,22,1,22,1,22,
        1,22,3,22,179,8,22,1,23,1,23,1,24,1,24,1,24,5,24,186,8,24,10,24,
        12,24,189,9,24,1,25,1,25,1,25,5,25,194,8,25,10,25,12,25,197,9,25,
        1,26,1,26,3,26,201,8,26,1,26,1,26,1,26,1,26,5,26,207,8,26,10,26,
        12,26,210,9,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,220,
        8,27,1,28,1,28,1,29,1,29,1,29,1,29,1,29,3,29,229,8,29,1,30,1,30,
        1,30,3,30,234,8,30,1,31,1,31,3,31,238,8,31,1,31,1,31,1,31,5,31,243,
        8,31,10,31,12,31,246,9,31,1,32,3,32,249,8,32,1,32,4,32,252,8,32,
        11,32,12,32,253,1,32,3,32,257,8,32,1,32,4,32,260,8,32,11,32,12,32,
        261,1,32,1,32,5,32,266,8,32,10,32,12,32,269,9,32,1,32,3,32,272,8,
        32,1,32,5,32,275,8,32,10,32,12,32,278,9,32,1,32,1,32,4,32,282,8,
        32,11,32,12,32,283,3,32,286,8,32,1,33,1,33,5,33,290,8,33,10,33,12,
        33,293,9,33,1,33,1,33,1,33,5,33,298,8,33,10,33,12,33,301,9,33,1,
        33,3,33,304,8,33,1,34,1,34,5,34,308,8,34,10,34,12,34,311,9,34,1,
        34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,5,36,321,8,36,10,36,12,36,
        324,9,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,5,37,334,8,37,10,
        37,12,37,337,9,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,
        39,1,39,1,40,1,40,1,41,1,41,5,291,299,309,322,335,0,42,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,77,39,79,40,81,0,83,0,1,0,10,2,0,33,33,65506,65506,2,0,45,
        45,95,95,5,0,35,35,95,95,8450,8450,8477,8477,8484,8484,9,0,38,38,
        42,43,45,46,61,61,63,63,95,95,8800,8800,10799,10799,65515,65515,
        3,0,60,60,62,62,8804,8805,6,0,38,38,43,43,45,45,63,63,95,95,126,
        126,2,0,43,43,45,45,1,0,48,57,3,0,9,10,13,13,32,32,2,0,65,90,97,
        122,392,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
        0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
        0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,
        0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,
        0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
        0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
        0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,
        0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,
        0,0,1,85,1,0,0,0,3,87,1,0,0,0,5,90,1,0,0,0,7,97,1,0,0,0,9,99,1,0,
        0,0,11,101,1,0,0,0,13,106,1,0,0,0,15,113,1,0,0,0,17,120,1,0,0,0,
        19,128,1,0,0,0,21,136,1,0,0,0,23,138,1,0,0,0,25,140,1,0,0,0,27,142,
        1,0,0,0,29,144,1,0,0,0,31,149,1,0,0,0,33,151,1,0,0,0,35,153,1,0,
        0,0,37,156,1,0,0,0,39,159,1,0,0,0,41,163,1,0,0,0,43,171,1,0,0,0,
        45,178,1,0,0,0,47,180,1,0,0,0,49,182,1,0,0,0,51,190,1,0,0,0,53,200,
        1,0,0,0,55,219,1,0,0,0,57,221,1,0,0,0,59,228,1,0,0,0,61,233,1,0,
        0,0,63,237,1,0,0,0,65,285,1,0,0,0,67,303,1,0,0,0,69,305,1,0,0,0,
        71,314,1,0,0,0,73,316,1,0,0,0,75,329,1,0,0,0,77,343,1,0,0,0,79,347,
        1,0,0,0,81,349,1,0,0,0,83,351,1,0,0,0,85,86,5,59,0,0,86,2,1,0,0,
        0,87,88,5,126,0,0,88,89,5,126,0,0,89,4,1,0,0,0,90,91,5,68,0,0,91,
        92,5,111,0,0,92,93,5,109,0,0,93,94,5,97,0,0,94,95,5,105,0,0,95,96,
        5,110,0,0,96,6,1,0,0,0,97,98,5,91,0,0,98,8,1,0,0,0,99,100,5,93,0,
        0,100,10,1,0,0,0,101,102,5,84,0,0,102,103,5,101,0,0,103,104,5,115,
        0,0,104,105,5,116,0,0,105,12,1,0,0,0,106,107,5,65,0,0,107,108,5,
        115,0,0,108,109,5,115,0,0,109,110,5,101,0,0,110,111,5,114,0,0,111,
        112,5,116,0,0,112,14,1,0,0,0,113,114,5,87,0,0,114,115,5,105,0,0,
        115,116,5,110,0,0,116,117,5,110,0,0,117,118,5,111,0,0,118,119,5,
        119,0,0,119,16,1,0,0,0,120,121,5,71,0,0,121,122,5,114,0,0,122,123,
        5,111,0,0,123,124,5,117,0,0,124,125,5,112,0,0,125,126,5,98,0,0,126,
        127,5,121,0,0,127,18,1,0,0,0,128,129,5,83,0,0,129,130,5,97,0,0,130,
        131,5,116,0,0,131,132,5,105,0,0,132,133,5,115,0,0,133,134,5,102,
        0,0,134,135,5,121,0,0,135,20,1,0,0,0,136,137,5,40,0,0,137,22,1,0,
        0,0,138,139,5,41,0,0,139,24,1,0,0,0,140,141,5,123,0,0,141,26,1,0,
        0,0,142,143,5,125,0,0,143,28,1,0,0,0,144,145,5,44,0,0,145,30,1,0,
        0,0,146,147,5,58,0,0,147,150,5,61,0,0,148,150,5,8788,0,0,149,146,
        1,0,0,0,149,148,1,0,0,0,150,32,1,0,0,0,151,152,5,124,0,0,152,34,
        1,0,0,0,153,154,5,124,0,0,154,155,5,62,0,0,155,36,1,0,0,0,156,157,
        5,124,0,0,157,158,5,33,0,0,158,38,1,0,0,0,159,160,5,58,0,0,160,40,
        1,0,0,0,161,164,3,43,21,0,162,164,3,45,22,0,163,161,1,0,0,0,163,
        162,1,0,0,0,164,42,1,0,0,0,165,172,5,8743,0,0,166,167,5,38,0,0,167,
        172,5,38,0,0,168,169,5,97,0,0,169,170,5,110,0,0,170,172,5,100,0,
        0,171,165,1,0,0,0,171,166,1,0,0,0,171,168,1,0,0,0,172,44,1,0,0,0,
        173,179,5,8744,0,0,174,175,5,124,0,0,175,179,5,124,0,0,176,177,5,
        111,0,0,177,179,5,114,0,0,178,173,1,0,0,0,178,174,1,0,0,0,178,176,
        1,0,0,0,179,46,1,0,0,0,180,181,7,0,0,0,181,48,1,0,0,0,182,187,3,
        39,19,0,183,186,3,83,41,0,184,186,7,1,0,0,185,183,1,0,0,0,185,184,
        1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,50,1,
        0,0,0,189,187,1,0,0,0,190,195,5,45,0,0,191,194,3,83,41,0,192,194,
        7,1,0,0,193,191,1,0,0,0,193,192,1,0,0,0,194,197,1,0,0,0,195,193,
        1,0,0,0,195,196,1,0,0,0,196,52,1,0,0,0,197,195,1,0,0,0,198,201,3,
        83,41,0,199,201,7,2,0,0,200,198,1,0,0,0,200,199,1,0,0,0,201,208,
        1,0,0,0,202,207,3,83,41,0,203,207,3,81,40,0,204,207,7,3,0,0,205,
        207,3,55,27,0,206,202,1,0,0,0,206,203,1,0,0,0,206,204,1,0,0,0,206,
        205,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,
        54,1,0,0,0,210,208,1,0,0,0,211,220,7,4,0,0,212,213,5,60,0,0,213,
        220,5,61,0,0,214,215,5,62,0,0,215,220,5,61,0,0,216,217,5,61,0,0,
        217,220,5,61,0,0,218,220,5,177,0,0,219,211,1,0,0,0,219,212,1,0,0,
        0,219,214,1,0,0,0,219,216,1,0,0,0,219,218,1,0,0,0,220,56,1,0,0,0,
        221,222,5,61,0,0,222,58,1,0,0,0,223,224,5,33,0,0,224,229,5,61,0,
        0,225,226,5,47,0,0,226,229,5,61,0,0,227,229,5,8800,0,0,228,223,1,
        0,0,0,228,225,1,0,0,0,228,227,1,0,0,0,229,60,1,0,0,0,230,231,5,45,
        0,0,231,234,5,62,0,0,232,234,5,8594,0,0,233,230,1,0,0,0,233,232,
        1,0,0,0,234,62,1,0,0,0,235,238,3,83,41,0,236,238,5,95,0,0,237,235,
        1,0,0,0,237,236,1,0,0,0,238,244,1,0,0,0,239,243,3,83,41,0,240,243,
        3,81,40,0,241,243,7,5,0,0,242,239,1,0,0,0,242,240,1,0,0,0,242,241,
        1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,64,1,
        0,0,0,246,244,1,0,0,0,247,249,7,6,0,0,248,247,1,0,0,0,248,249,1,
        0,0,0,249,251,1,0,0,0,250,252,3,81,40,0,251,250,1,0,0,0,252,253,
        1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,286,1,0,0,0,255,257,
        7,6,0,0,256,255,1,0,0,0,256,257,1,0,0,0,257,259,1,0,0,0,258,260,
        3,81,40,0,259,258,1,0,0,0,260,261,1,0,0,0,261,259,1,0,0,0,261,262,
        1,0,0,0,262,263,1,0,0,0,263,267,5,46,0,0,264,266,7,7,0,0,265,264,
        1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,286,
        1,0,0,0,269,267,1,0,0,0,270,272,7,6,0,0,271,270,1,0,0,0,271,272,
        1,0,0,0,272,276,1,0,0,0,273,275,3,81,40,0,274,273,1,0,0,0,275,278,
        1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,279,1,0,0,0,278,276,
        1,0,0,0,279,281,5,46,0,0,280,282,7,7,0,0,281,280,1,0,0,0,282,283,
        1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,286,1,0,0,0,285,248,
        1,0,0,0,285,256,1,0,0,0,285,271,1,0,0,0,286,66,1,0,0,0,287,291,5,
        34,0,0,288,290,9,0,0,0,289,288,1,0,0,0,290,293,1,0,0,0,291,292,1,
        0,0,0,291,289,1,0,0,0,292,294,1,0,0,0,293,291,1,0,0,0,294,304,5,
        34,0,0,295,299,5,39,0,0,296,298,9,0,0,0,297,296,1,0,0,0,298,301,
        1,0,0,0,299,300,1,0,0,0,299,297,1,0,0,0,300,302,1,0,0,0,301,299,
        1,0,0,0,302,304,5,39,0,0,303,287,1,0,0,0,303,295,1,0,0,0,304,68,
        1,0,0,0,305,309,5,96,0,0,306,308,9,0,0,0,307,306,1,0,0,0,308,311,
        1,0,0,0,309,310,1,0,0,0,309,307,1,0,0,0,310,312,1,0,0,0,311,309,
        1,0,0,0,312,313,5,96,0,0,313,70,1,0,0,0,314,315,2,8704,8959,0,315,
        72,1,0,0,0,316,317,5,47,0,0,317,318,5,47,0,0,318,322,1,0,0,0,319,
        321,9,0,0,0,320,319,1,0,0,0,321,324,1,0,0,0,322,323,1,0,0,0,322,
        320,1,0,0,0,323,325,1,0,0,0,324,322,1,0,0,0,325,326,5,10,0,0,326,
        327,1,0,0,0,327,328,6,36,0,0,328,74,1,0,0,0,329,330,5,47,0,0,330,
        331,5,42,0,0,331,335,1,0,0,0,332,334,9,0,0,0,333,332,1,0,0,0,334,
        337,1,0,0,0,335,336,1,0,0,0,335,333,1,0,0,0,336,338,1,0,0,0,337,
        335,1,0,0,0,338,339,5,42,0,0,339,340,5,47,0,0,340,341,1,0,0,0,341,
        342,6,37,0,0,342,76,1,0,0,0,343,344,7,8,0,0,344,345,1,0,0,0,345,
        346,6,38,0,0,346,78,1,0,0,0,347,348,5,10,0,0,348,80,1,0,0,0,349,
        350,7,7,0,0,350,82,1,0,0,0,351,352,7,9,0,0,352,84,1,0,0,0,33,0,149,
        163,171,178,185,187,193,195,200,206,208,219,228,233,237,242,244,
        248,253,256,261,267,271,276,283,285,291,299,303,309,322,335,1,6,
        0,0
    ]

class FalconLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    TEST = 6
    ASSERT = 7
    WINNOW = 8
    GROUPBY = 9
    SATISFY = 10
    LPAREN = 11
    RPAREN = 12
    LBRAC = 13
    RBRAC = 14
    COMMA = 15
    ASSIGN = 16
    BAR = 17
    ABAR = 18
    EBAR = 19
    COLON = 20
    OP_LOGICAL = 21
    OP_AND = 22
    OP_OR = 23
    OP_NOT = 24
    DIRECTIVE = 25
    FNARG = 26
    ID = 27
    OPERATORS = 28
    OP_EQ = 29
    OP_NE = 30
    ARROW = 31
    LABEL = 32
    NUMBER = 33
    STRING = 34
    CODESMNT = 35
    UMATH = 36
    COMMENT = 37
    MCOMMENT = 38
    WS = 39
    NL = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'~~'", "'Domain'", "'['", "']'", "'Test'", "'Assert'", 
            "'Winnow'", "'Groupby'", "'Satisfy'", "'('", "')'", "'{'", "'}'", 
            "','", "'|'", "'|>'", "'|!'", "':'", "'='", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "TEST", "ASSERT", "WINNOW", "GROUPBY", "SATISFY", "LPAREN", 
            "RPAREN", "LBRAC", "RBRAC", "COMMA", "ASSIGN", "BAR", "ABAR", 
            "EBAR", "COLON", "OP_LOGICAL", "OP_AND", "OP_OR", "OP_NOT", 
            "DIRECTIVE", "FNARG", "ID", "OPERATORS", "OP_EQ", "OP_NE", "ARROW", 
            "LABEL", "NUMBER", "STRING", "CODESMNT", "UMATH", "COMMENT", 
            "MCOMMENT", "WS", "NL" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "TEST", "ASSERT", 
                  "WINNOW", "GROUPBY", "SATISFY", "LPAREN", "RPAREN", "LBRAC", 
                  "RBRAC", "COMMA", "ASSIGN", "BAR", "ABAR", "EBAR", "COLON", 
                  "OP_LOGICAL", "OP_AND", "OP_OR", "OP_NOT", "DIRECTIVE", 
                  "FNARG", "ID", "OPERATORS", "OP_EQ", "OP_NE", "ARROW", 
                  "LABEL", "NUMBER", "STRING", "CODESMNT", "UMATH", "COMMENT", 
                  "MCOMMENT", "WS", "NL", "DIGIT", "CHAR" ]

    grammarFileName = "Falcon.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


