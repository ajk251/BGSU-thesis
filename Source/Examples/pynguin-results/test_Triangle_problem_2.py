# Automatically generated by Pynguin.
import Triangle_problem_2 as module_0


def test_case_0():
    int_0 = 668
    str_0 = module_0.classify(int_0, int_0, int_0)
    assert str_0 == 'equilateral'


def test_case_1():
    int_0 = -1291
    int_1 = -3273
    str_0 = module_0.classify(int_0, int_0, int_1)
    assert str_0 == 'not-a-triangle'
    int_2 = -872
    str_1 = module_0.classify(int_0, int_2, int_0)
    assert str_1 == 'not-a-triangle'


def test_case_2():
    int_0 = -438
    int_1 = -5118
    str_0 = module_0.classify(int_0, int_0, int_1)
    assert str_0 == 'not-a-triangle'
    int_2 = 1626
    str_1 = module_0.classify(int_0, int_2, int_2)
    assert str_1 == 'not-a-triangle'


def test_case_3():
    int_0 = 1283
    int_1 = 1989
    str_0 = module_0.classify(int_0, int_1, int_0)
    assert str_0 == 'isosceles'


def test_case_4():
    triangle_error_0 = module_0.TriangleError()
    int_0 = 1
    triangle_error_1 = module_0.TriangleError()
    str_0 = module_0.classify(int_0, int_0, int_0)
    assert str_0 == 'equilateral'
    int_1 = 2045
    str_1 = module_0.classify(int_1, int_1, int_1)
    assert str_1 == 'equilateral'
    int_2 = 306
    str_2 = module_0.classify(int_1, int_1, int_2)
    assert str_2 == 'isosceles'
    assert triangle_error_0 is not None
    assert triangle_error_1 is not None
    int_3 = -2102
    int_4 = 224
    str_3 = module_0.classify(int_3, int_4, int_1)
    assert str_3 == 'not-a-triangle'


def test_case_5():
    triangle_error_0 = module_0.TriangleError()
    int_0 = 1172
    int_1 = 854
    str_0 = module_0.classify(int_1, int_0, int_0)
    assert str_0 == 'isosceles'
    assert triangle_error_0 is not None
    int_2 = 530
    str_1 = module_0.classify(int_0, int_2, int_2)
    assert str_1 == 'not-a-triangle'


def test_case_6():
    int_0 = 1393
    str_0 = module_0.classify(int_0, int_0, int_0)
    assert str_0 == 'equilateral'
    triangle_error_0 = module_0.TriangleError()
    int_1 = -1675
    str_1 = module_0.classify(int_0, int_0, int_0)
    assert str_1 == 'equilateral'
    int_2 = 3885
    int_3 = 2383
    list_0 = [int_1, int_1, int_2, str_1]
    triangle_error_1 = module_0.TriangleError(*list_0)
    int_4 = 5407
    str_2 = module_0.classify(int_3, int_4, int_2)
    assert str_2 == 'scalene'
    assert triangle_error_0 is not None
    assert triangle_error_1 is not None
    int_5 = 2584
    int_6 = -1744
    int_7 = -1838
    int_8 = 2091
    str_3 = module_0.classify(int_7, int_2, int_8)
    assert str_3 == 'not-a-triangle'
    str_4 = module_0.classify(int_1, int_6, int_3)
    assert str_4 == 'not-a-triangle'
    str_5 = module_0.classify(int_0, int_4, int_5)
    assert str_5 == 'not-a-triangle'
