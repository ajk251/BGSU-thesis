
':' are keywords, passed in as arguments

use ; to terminate              ?
    < > for argument lists      ?

ü†ï   ‚ä¢  !  raises error                 ? Right Tack (or version of it) is 'asserts'
‚§â ‚ä¨ ~!  does not raise error         ?

‚ä§ always true
‚ä• always false


‚à∑	type
?‚à∑	is-type
‚áí	returns
‚üπ	where-is
‚äß	models, ie models concept


--------------------------------
TODO:
	‚Ä¢ better support for testing datastructures
		- length, contains, all/any/at-least
	‚Ä¢ intergration with code analysis:
		- measure metrics like number of operators / func, ect‚Ä¶
	

--------------------------------

assertion/unit tests
boundry/domain based tests
random tests
pairwise tests
mutation

mocking

fsm testing

--------------------------------

--------------------------------

<name> ¬ß{ ‚Ä¶ }					namespaces
let n ‚âî [0 ‚Ä¶ 100]				use ... or ‚Ä¶ for a range
x,y ‚â• 3							destructured comparisons?
concepts						Concept Number ‚ãÄ is-integer is_gt0
       							Concept Number ‚âî  is-integer is_gt0
       							|[ is-integer is-gt0 is-even ]|	
								 ‚ü¶is-integer is_gt0 is-even‚üß
								 
								 
Destructured predicate			takes apart datastructure and tests it

// lists							 
‚¶Éis-even ‚àÄ x‚àäX‚¶Ñ


// by index
‚¶Éstructure ‚üπ parts ‚¶Ñ
‚¶Éis-tuple where :0 ‚äß Number :1 = 6 :3 ‚äß Number‚¶Ñ
‚¶Éis-tuple ‚üπ :0 ‚äß Number :1 = 6 :3 ‚äß Number‚¶Ñ
‚¶Éis-tuple ==> :0 ‚äß Number :1 = 6 :3 ‚äß Number‚¶Ñ

// ‚àã and in? are the same                 'age' is member of D and it ‚äß Number
‚¶Éis-dict ‚üπ  ‚àã 'name' D, in? 'address' D, 'age' ‚àà D ‚äß Number‚¶Ñ

--------------------------------

fn f := :name f
     |  :domain Int Int Float
     |  :domain Float Float Float
     |  :optional 4 5
     
Unit { :name Test_1
       :tag  smoke
       :note 'this test...'
       
       Concept Number ‚ãÄ is-integer is_gt0
       Concept Number ‚âî  ‚ü¶is-integer is_gt0‚üß
       |[ is-integer is-gt0 is-even ]|			
       
       // basic assertions
       
       Test f:                        	// tests over both domains
          | <1 2 3> = 6
          | <1 3 4> ‚â† 6
          | <5 6 7> ‚â§ 18
          | <5 6 7> ‚áí 18                // returns 18, type & value
          | <5 6 7 ‚äß Number             // models Concept - multiple predicates
          | <5 6 :kw extra 4> ‚áí 15      // uses keyword argument
          | <5 6 *extra 4> ‚áí 15
          | <5 6 0> ‚ä¢ DivisionByZero :note 'this is...'
          | <5 6 0> ! DivisionByZero :note 'this is...better!'
       
       // use quickcheck on func f
       
       Quickcheck f :number 100
       
       // apply arguments to function, with assertions (6 tests total)
       
       Test f [<1 2 3> <2 3 4> <3 4 5>]:
          | ‚äß Number
          | ‚ä¨  ComputationError
          | ~! ComputationError
          
       // cartesian product of arguments, with asserts (54 tests) 
        
       Test f [<1 2 3> √ó <4 5 6> √ó <7 8 9>]:
          | ‚äß Number
          | ~! ComputationError
                 
     }
     
     
Unit { :name Test_MyObject
       :note 'test the functionalty of ‚Ä¶'

    // Mocking
       
       var v1 := `python.object.foo.bar(4)`             // a code block
       
       Object o1 := Module.Objs.MyObject
                 | :domain Integer Integer
                 
       ? save result? ignore result? no return value
       ? -> name       _             _

	  // with a single test with a sequence of statements
       With o1 on [<1 2>]:                      // test o1, initialized with (1 2)
           | _ o1.m1 <'a' 'b'> => _				// call m1 with 'a' 'b'', returns none
           										   don't save the result
           | n o1.m2 <'c' 1> ‚áí 5
           | _ o1.m3 <n 2>   ‚äß Number      
           
       With o1 on [<1 2> <3 4>]:                
           | _ o1.m1 <'a' 'b'> => _			
           | n o1.m2 <'c' 1> ‚áí 5
           | _ o1.m3 <n 2>   ‚äß Number       
     }
