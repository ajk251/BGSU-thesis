

[Why at all?]

‚Ä¢ Easier to learn - one language for all test
‚Ä¢ Can be more comprehensive than any one framework or tool or tool-set
‚Ä¢ Unifies test methodologies - there are many philosophies, styles, types, methods, etc - but hard to bring under one umbrella
	--> there exist so many ways because no one way works or one tool
‚Ä¢ Can use the language of Computer Science/Math/Logic
‚Ä¢ Python tests look like Python or C++/JavaScript/etc ‚Üí a chance to reflect using a more reasoned approach
‚Ä¢ separates test from code
‚Ä¢ by seperating tests from language - intent can become clearer. Like what is this software
	doing and how could we re-write it. Software archeology.
‚Ä¢ software testing is a skill in an of itself. One language builds the skill while 
	avoiding one framework



[Why Lisp-like]

‚Ä¢ the most powerful language, ie macros
	‚Üí this is powerful because it uses an intermediate language, so kinda sort almost macro like



[Why Sooooo many Unicode symbols, üêò]

‚Ä¢ allows for expressiveness
	‚Üí expressiveness means thoughtful expression and communication of ideas and understanding of those ideas, for the developer/tester/reader, 5 minutes/5 months/5 years later
‚Ä¢ can use the language of cs/logic/set-theory/math


[Why testing fails]
‚Ä¢ verbose, difficult to express simple tests without lots of code
‚Ä¢ often done at the end of a project - can be an after thought

[What will work]
‚Ä¢ a simple intermediate format - opens the door other frameworks & algorithms. Doesn't just generate tests - it uses the intermediate format that can be re-used. More general.




